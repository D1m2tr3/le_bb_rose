#include <stdlib.h>

char *ft_strdup(char *src)
{
    char *dest;
    int size;
    
    size = 0;
    while (src[size])
        size++;
    if (!(dest = (char*)malloc(sizeof(char*) * (size + 1))))
        return (NULL);
    dest[size = 0];
    size = 0;
    while (src[size])
    {
        dest[size] = src[size];
        size++;
    }
    return (dest);
}

int     *ft_range(int min, int max)
{
    int *dest;
    int i;
    
    if ((min >= max) || (!(dest = malloc(sizeof(int*) * (max - min)))))
        return (NULL);
    i = 0;
    while (max - min)
    {
        dest[i] = min;
        i++;
        min++;
    }
    return (dest);
}

int     ft_ultimate_range(int **range, int min,  int max)
{
    *range = ft_range(min, max);
    return (min >= max ? 0 : max - min);
}

int     ft_strlen(char *str)
{
    int len;
    
    len = 0;
    while (str[len])
        len++;
    return (len);
}

char *ft_concat_params(int argc, char **argv)
{
    char *dest;
    int len;
    int j;
    int i;
    
    len = 0;
    j = 1;
    while(j < argc)
        len += ft_strlen(argv[j++]);
    if (!(dest = malloc(sizeof(char*) * (len + 1))))
        return(NULL);
    len = 0;
    j = 1;
    while(j < argc)
    {
        i = 0;
        while (argv[j][i])
        {
            dest[len] = argv[j][i];
            len++;
            i++;
        }
        dest[len++] = '\n';
        j++;
    }
    return (dest);
}

// splitwhitespaces
int     wdc(char *str) // fonctionne
{
    int i;
    int wdc;
    
    i = 0;
    wdc = 0;
    while (str[i])
    {
        while (str[i] == 9 || str[i] == 10 || str[i] == 32)
            i++;
        if (!(str[i] == 9 || str[i] == 10 || str[i] == 32 || str[i] == 0))
            wdc++;
        while (!(str[i] == 9 || str[i] == 10 || str[i] == 32 || str[i] == 0))
            i++;
    }
    return (wdc);
}

int     wds(char *str, int *ptr)
{
    int i;
    
    while (str[*ptr] == 9 || str[*ptr] == 10 || str[*ptr] == 32)
        (*ptr)++;
    if (!(str[*ptr] == 9 || str[*ptr] == 10 || str[*ptr] == 32 || str[*ptr] == 0))
        i = *ptr;
    while (!(str[i] == 9 || str[i] == 10 || str[i] == 32 || str[i] == 0))
        i++;
   return (i - *ptr);    
}

void    writer(char *dest, char *model, int *i, int len)
{
    int k;
    
    k = 0;
    while (k < len)
        dest[k++] = model[(*i)++];
}

char **ft_split_whitespaces(char *str)
{
    char **dest;
    int len_tab;
    int len_wd;
    int j;
    int i;
    
    len_tab = wdc(str);
    dest = malloc(sizeof(char**) * (len_tab + 1));
    if (!(len_tab && dest))
         return (NULL);
    dest[len_tab] = 0;
    j = 0;
    i = 0;
    while (j < len_tab)
    {
        len_wd = wds(str, &i);
        dest[j] = malloc(sizeof(char*) * (len_wd + 1));
        if (!(dest[j]))
            return (NULL);
        dest[j][len_wd] = 0;
        writer(dest[j], str, &i, len_wd);
        j++;
    }
    return (dest);
}
//end splitwhitespaces

void    ft_print_words_tables(char **tab) // Ã  tester
{
    int i;
    int j;
    
    j = 0;
    while (tab[j])
    {
        i = 0;
        while(tab[j][i])
            ft_putchar(tab[j][i++]);
        ft_putchar('\n');
        j++;
    }
}
